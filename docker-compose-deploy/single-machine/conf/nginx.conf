#user  nobody;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # https://github.com/openresty/lua-nginx-module#lua_shared_dict
    lua_shared_dict redis_cluster_slot_locks 100k;
    server {
        access_log off;

        listen       8080;
        server_name  localhost;
        charset utf-8;
        location / {
            #default_type 'text/plain;charset=utf8';
            default_type  'applicaiton/json;charset=utf8';
            # cat /etc/resolv.conf
            # resolver 127.0.0.11;
            # https://github.com/openresty/openresty/#resolvconf-parsing
            resolver local=on;
            # docker-compose cp /Users/bingoo/aaa/nginx.conf  openresty:/opt/bitnami/openresty/nginx/conf
            # /opt/bitnami/openresty/bin/openresty -c /opt/bitnami/openresty/nginx/conf/nginx.conf -s reload
            # https://github.com/Kong/resty-redis-cluster v1.5.3
            content_by_lua_block {
                local config = {
                    -- 以下是 resty-redis-cluster 组件本身参数
                    dict_name = "redis_cluster_slot_locks", -- 用于锁定的共享字典名称 shared dictionary name for locks, if default value is not used 
                    refresh_lock_key = "refresh_lock",      -- 每个workder的锁前缀 shared dictionary name prefix for lock of each worker, if default value is not used 
                    name = "apigw_cluster",                   -- 集群名称 rediscluster name
                    -- 以下是连接 redis 集群的服务器参数
                    auth = "password",                      -- set password while setting auth
                    serv_list = {                           -- redis cluster node list(host and port),
                        { ip = "redis-cluster-node-6373", port = 6373 },
                        { ip = "redis-cluster-node-6374", port = 6374 },
                        { ip = "redis-cluster-node-6375", port = 6375 },
                        { ip = "redis-cluster-node-6376", port = 6376 },
                        { ip = "redis-cluster-node-6377", port = 6377 },
                        { ip = "redis-cluster-node-6378", port = 6378 }
                    },
                    -- 以下是客户端连接参数
                    keepalive_timeout = 60000,              -- redis connection pool idle timeout
                    keepalive_cons = 1000,                  -- redis connection pool size
                    connect_timeout = 1000,                 -- timeout while connecting
                    max_redirection = 5,                    -- maximum retry attempts for redirection
                    max_connection_attempts = 1             -- maximum retry attempts for connection
                }
                local redis_cluster = require "resty.rediscluster"
                local red_c = redis_cluster:new(config)
                local v, err = red_c:get(ngx.var.arg_name)
                local cjson = require "cjson"
                ngx.say( cjson.encode({arg=ngx.var.arg_name, value=v, error=err}))
            }

        }

         location /v2 {
            default_type  'applicaiton/json;charset=utf8';
            content_by_lua_block {
                local cjson = require "cjson"
                ngx.say( cjson.encode({arg=ngx.var.arg_name, value="当你想要测试一块玻璃的硬度时，这块玻璃注定要碎。换句话说，怀疑一旦产生，罪名就已经成立了。\n\n——《蝉女》\n"}))
            }
        }


        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}
